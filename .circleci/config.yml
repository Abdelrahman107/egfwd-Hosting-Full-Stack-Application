version: 2.1
orbs:
  # orgs contain basc recipes and reproducible actions (install node, aws, etc.)
  node: circleci/node@5.0.2
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.1
  aws-elastic-beanstalk: circleci/aws-elastic-beanstalk@2.0.1
  # different jobs are calles later in the workflows sections
jobs:
  build_deploy_frontend:
    docker:
      # the base image can run most needed actions with orbs
      - image: "cimg/node:14.15"
    steps:
      # install node and checkout code
      - node/install:
          node-version: '14.15'         
      - checkout
      - aws-cli/setup
      # Use root level package.json to install dependencies in the frontend app

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install Front-End Dependencies
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
            npm run frontend:install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
    
      # TODO: Install dependencies in the the backend API   

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-       
      - run:
          name: Install API Dependencies
          command: |
           echo "TODO: Install dependencies in the the backend API  "
           npm run api:install
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
      # TODO: Lint the frontend
      - run:
          name: Front-End Lint
          command: |
            echo "TODO: Lint the frontend"
            npm run frontend:lint
      # TODO: Build the frontend app
      - run:
          name: Front-End Build
          command: |
            echo "TODO: Build the frontend app"
            npm run frontend:build
      - run :
          name: Deploy to S3
          command: |
            echo "TODO: Deploy to S3"
            npm run frontend:deploy     
  build_deploy_backend:
    docker:
      - image: "cimg/node:14.15"
    steps:
      - node/install:
          node-version: '14.15'         
      - checkout
      - aws-cli/setup 
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-
      - run:
          name: Install API Dependencies
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
           # print env variables
            echo $(AWS_ACCESS_KEY_ID)
            echo $(AWS_SECRET_ACCESS_KEY)
            echo $(POSTGRES_DB)
            echo $(POSTGRES_HOST)
            echo $(POSTGRES_PASSWORD)
            echo $(POSTGRES_USER)
            npm run api:install
      - save_cache:
          paths:
            - ./node_modules
          key: v2-dependencies-{{ checksum "package.json" }}
      - run:
          name: API build
          command: |
            echo "TODO: Build the backend app"
            npm run api:build
      - aws-elastic-beanstalk/setup
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            echo "TODO: Deploy to Elastic Beanstalk"
            npm run api:deploy        


            
workflows:
  udagram:
    jobs:
      - build_deploy_frontend:
          filters:
            branches:
              only: master
      - build_deploy_backend:
          filters:
            branches:
              only: master